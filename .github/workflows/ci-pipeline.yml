name: CI Pipeline

on:
  push:
    branches:
      - main # Or your primary development branch, e.g., master.
  pull_request:
    branches:
      - main # Or your primary development branch

jobs:
  build_and_scan:
    name: Build, Scan, and Analyze
    runs-on: [self-hosted, Runner-1]

    steps:
      - name: Stage 1 - Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for Gitleaks to scan full history

      - name: Stage 2 - Gitleaks Security Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Optional: Gitleaks action may use this for reporting to GitHub Security tab
          # GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # If you have a Gitleaks Pro/Enterprise license
        # The action will fail by default if leaks are found, stopping the pipeline.

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin' # Using Temurin as a common distribution

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Stage 3 - Build with Maven
        run: mvn -B clean verify
        # -B for batch mode (non-interactive)
        # 'verify' compiles, runs tests, and packages the application.
        # If tests fail, this step fails, and the pipeline stops.

      - name: Stage 4 - SonarQube Code Quality Scan
        # This step assumes your pom.xml is configured for SonarQube,
        # or SonarQube scanner properties are passed via command line or environment variables.
        # The SonarQube Maven plugin automatically picks up SONAR_HOST_URL and SONAR_TOKEN from env.
        run: mvn -B sonar:sonar -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # For PR decoration if configured in SonarQube
          # SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} # Also picked up by SonarQube scanner
          # SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Also picked up by SonarQube scanner
          # You might need to define sonar.projectKey in your pom.xml or pass it here:
          # -Dsonar.projectKey=your_project_key
          # -Dsonar.organization=your_organization_key # If using SonarCloud
