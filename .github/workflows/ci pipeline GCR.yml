name: CI/CD Pipeline for E-Commerce App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  checkout:
    name: 1️⃣ Checkout Code
    runs-on: [self-hosted, Runner-1]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for Gitleaks

      - name: Upload workspace artifact
        uses: actions/upload-artifact@v4
        with:
          name: source-code
          path: .
          retention-days: 1

  security_scan:
    name: 2️⃣ Security Scan (Gitleaks)
    needs: checkout
    runs-on: [self-hosted, Runner-1]
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: .

      - name: Install and run Gitleaks
        run: |
          # Check if gitleaks is installed
          if ! command -v gitleaks &> /dev/null; then
            echo "Gitleaks not found, downloading..."
            VERSION="8.18.2"
            curl -L "https://github.com/zricethezav/gitleaks/releases/download/v${VERSION}/gitleaks_${VERSION}_linux_x64.tar.gz" -o gitleaks.tar.gz
            tar -xzf gitleaks.tar.gz
            chmod +x gitleaks
            echo "Gitleaks installed"
          else
            echo "Gitleaks already installed: $(which gitleaks)"
          fi
          
          # Run gitleaks scan
          ./gitleaks detect --source="." --verbose || {
            echo "Gitleaks found issues"
            exit 1
          }
          
          echo "Gitleaks scan completed successfully"
        shell: bash

  build:
    name: 3️⃣ Build Java Application
    needs: security_scan
    runs-on: [self-hosted, Runner-1]
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: .

      - name: Build with Maven
        run: mvn clean install -B -DskipTests
        shell: bash
        
      - name: Upload built JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar
          retention-days: 1

  docker_build:
    name: 4️⃣ Build Docker Image
    needs: build
    runs-on: [self-hosted, Runner-1]
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: .
          
      - name: Download JAR files
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target

      - name: Build Docker image
        run: |
          GCR_HOSTNAME="us-central1.gcr.io"
          IMAGE_NAME="pk/e-app"
          GCP_PROJECT="${{ secrets.GCP_PROJECT }}"
          
          docker build \
            --tag "${GCR_HOSTNAME}/${GCP_PROJECT}/${IMAGE_NAME}:${{ github.sha }}" \
            --tag "${GCR_HOSTNAME}/${GCP_PROJECT}/${IMAGE_NAME}:latest" \
            .
        shell: bash

      - name: Save Docker image to file
        run: |
          GCR_HOSTNAME="us-central1.gcr.io"
          IMAGE_NAME="pk/e-app"
          GCP_PROJECT="${{ secrets.GCP_PROJECT }}"
          
          docker save -o docker-image.tar "${GCR_HOSTNAME}/${GCP_PROJECT}/${IMAGE_NAME}:${{ github.sha }}" "${GCR_HOSTNAME}/${GCP_PROJECT}/${IMAGE_NAME}:latest"
        shell: bash
        
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: docker-image.tar
          retention-days: 1

  push_to_gcr:
    name: 5️⃣ Push to Google Container Registry
    needs: docker_build
    runs-on: [self-hosted, Runner-1]
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .
      
      - name: Load Docker image
        run: docker load -i docker-image.tar
        shell: bash

      - name: Configure Docker to use Google Cloud credentials
        run: |
          GCR_HOSTNAME="us-central1.gcr.io"
          gcloud auth configure-docker ${GCR_HOSTNAME} --quiet
        shell: bash

      - name: Push Docker image to GCR
        run: |
          GCR_HOSTNAME="us-central1.gcr.io"
          IMAGE_NAME="pk/e-app"
          GCP_PROJECT="${{ secrets.GCP_PROJECT }}"
          
          docker push "${GCR_HOSTNAME}/${GCP_PROJECT}/${IMAGE_NAME}:${{ github.sha }}"
          docker push "${GCR_HOSTNAME}/${GCP_PROJECT}/${IMAGE_NAME}:latest"
        shell: bash